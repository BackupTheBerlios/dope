- ein diff protocol waere genial
- add (generic) package oriented protocols (package vs. stream)
  package oriented:
	+ error recovery
	+ xml easier
	- copy overhead
	- complete msg must fit in memory

- containers should be cleared on read?
 (well the idea is to have default values - in the case of containers one could think of
  reading the first element as overwriting the default value)
 on the other hand if the streams clear the container the user can't do anything about it
 if they are not cleared the user can state it in his composite method (if xmlsaxinstream is fixed ;-)

floats and doubles can be "nan" = not a number
but stringToAny will fail in this case 

habe das problem einigermassen geloesst
ist aber pfusch - und man braucht ein rel. aktuelle libxml
kann ich aber nen workaround machen
muss ich mir merken wenn ich eof reported habe
leider denken die libxml menschen daß man das so nicht machen soll
=> wird wohl nix mit libxml
das beste ist wohl einen anderen xml parser zu benutzen oder eben
einen kleinen sax parser zu schreiben
oder eben doch das ganze wrappen (also bytes zaehlen) und dann
pakete verschicken wo die groesse angegeben ist - was ich fuer
ziemlich dumm halte
naja
auf jedenfall kann man beides machen
und fuer adic werde ich eh nicht fuers protocol benutzen
=> hat noch zeit


das problem beim sax parser ist
dass der grow aufgerufen wird obwohl noch bytes im puffer sind


- the debug warn and check macros should all be one statement

- read in non-blocking mode makes trouble with the xmlsaxinstream because the parser
  does not handle it correctly
  the problem is:
  in non-blocking mode a read might return 0 bytes but the std c++ streams only have
  the concept of eof => i do not a see possible solution yet because currently no data
  is different from eof
 
- what about the simple types - shouldn't they have fixed sizes (inttypes.h ?)
  take a look at how XTL handles this - as I remember it didn't really ?
- signed char != char != unsigned char 

- replace c header includes with corresponding c++ header include 
  (<unistd.h> -> <cunistd> ?)

- TRANSLATE this file to English ;-)

use boost concept checks

wollte das mit den exceptions richtig machen

habe nochmal das mit dem operator| probiert
in experiments/pipe.cpp
aber toll ist das wirklich nicht
der ganze aufwand nur um den . durch ein | zu ersetzen ist
ja wohl stumpfsinnig


wieder einmal das config.h problem
soll es installiert werden ?
soll es anders heißen
wer soll es includen und wie <> vs ""
nochwas zu dem pfadproblem
es ist dumm wenn dope-config --cflags einen include pfad wir -I/usr/local/include ausgibt,
da man den evtl. nicht will (z.bsp merhere compiler installiert)
besser waere also wenn dope in zbsp. /usr/local/include/dope-version/dope installiert wird
das würde es auch ermöglichen mehrere versionen der headers zu installieren - abgesehen vom
dope-config :-(

entferne name extension
und mache als beispiel einer extension eine comment extension
und denke erst nochmal ueber extensions nach und verknüpfe traits irgendwie
mit der extension klasse


mir fehlt das konzept von anfang und ende
also der erste simple muss sich von anderen unterscheiden
brauche ich staendig bei netzwerk-kram z.bsp http-stream
und bei xml (root-node)
...
im moment benutze ich flush in diese richtung
lsg.: 
user benutzt nicht direkt simple sondern was anderes
oder ich mache dass ein stream immer nur ein objekt lesen/schreiben kann
aber das waere doof ?
das ist unsinn der stream kann die schachteltiefe mitzählen => brauche ich nicht
allerdings fällt mir dazu ein dass einfache typen bestimmt bei dem einen oder anderem stream
probleme haben


das mit den traits richtig gut machen
evtl. noch mal darüber nachdenken wie sich das mit vererbung bei streams
vertreagt
nochmal ueber das problem der rueckgabewerte nachdenken (im zusammenhang mit ableiten z.bsp rawoutstream)



gute idee:
erweiterbarkeit muß ich sicherstellen
das koennte ich mit einer generischen methode info machen
dann kann jeder stream eine default impl. haben die nichts macht
also
template <typename X>
stream &info(X)
{
}
oder evtl. ext(X)

<VERALTET>
so koennte ich auch die name() geschichte machen und dann würde es reichen bei
XTL eben die default impl hinzuzufügen
bei XML koennte man da die namespace geschichten mit machen (und DTD - ACHTUNG DTD und 
namespaces vertragen sich anscheinend nicht - dann muesste man xml schema benutzen was
aber anscheinend von libxml noch nicht unterstützt wird)
v.a. reicht der typ bei fixen sachen und somit kann der compiler mehr optimieren
aber strings sind keine template prarameter oder ?
und das def_gettypename zeugs koennte verschwinden
sollte auf jedenfall umbenannt werden in REGISTER_TYPE oder so
</VERALTET>

das problem mit der methode ist natuerlich dass kein compile-time check mehr
existiert ob alle notwendige information geg. ist => runtime-fehler
was sind die alternativen ?
streams von einer basisklasse mit empty default methoden ableiten
dann müßte ich nur die basis-klasse ändern.


ich muß unbedingt die schnittstelle fuer layer 2 streams exakt festlegen
evtl. verschieden die dann ueber type traits identifizierbar sind
und dann muß endlich ein multi-ptokoll stream als beispiel her
und ne app -- außerdem ein bsp. c++ <-> java
und xmlrpc
dann muß xslt integriert werden


* leak tracing - currently i have problems to get LeakTracer to work with
  gcc-3.0 but perhaps the std c++ lib "leaks"

* const correctness
  search for const_cast !! const_cast removes const => no const guarantee
  f.e. const int a=5;
  a=3; => compiller error
  but const_cast<int &>(a)=3; => no compiler error but runtime error
  i replaced the const_cast with static_cast => now compiler reports warnings
  => I will not forget it
  (take a look at different -O levels and constness)
  the main problem is perhaps std::map

  my problem is I don't want to have the user to write the same method twice
  the const and non-const variant => i need some template trick but the const attribute of a method
  can not be templated ?
  how to solve this ?
  or i simply say - sorry no const write - but this could get annoying
  my current solution is that i know my write is const (or i hope) and then use const_cast
  to fake the const.

  i should categorize the streams into streams altering the objects and streams which don't
  (just like read and write but the term read and write do not fit always - as the term stream
  does not fit always either)

* error reporting with streambuf (layer0)
  especially the saxwrapper must report errors to the sax parser
  should work now - but needs a review

* w_char support - UNICODE ?

* documentation

* examples

* xmlrpc
  xmlrpc is quite stupid
* soap
  soap seems to be even worse

* test with JSX
  i didn't get jsx to work correctly

* DTD / xml schema
  just a matter of writing a stream adapter

* scheme/guile
  accesing data from scheme is a bit tricky
  don't know yet which is the best representation of a object in scheme
  the only portable solution seems to produce a string and use eval   

* CORBA (use GIOP from XTL)
  can't find a simple docu how to pass a message to corba
  seems I have to learn more about corba first - unfortunately I don't like corba

* allow xslt tansformations
  the problem is I can't find a xslt processor which doesn't build a DOM of the document to transform
  => memory usage linear to document size
  => only suitable for small objects/documents
  since xmlsaxinstream is very slow i wanted to add a xmldominstream anyway
  => add a xmldomoutstream, too (xmldomoutstream is done)
  those streams would then be the right choice for small objects

performance problems with c++ streams
my own streams do not implement sputn sgetn => read write with one byte - i will change this
unfortunately it seems g++ (3.0.3) streambufs write also only 1 byte? - strace showed this? (can't believe
that it will stay/is like this - i think it was only to stdout or something like that to meet the std 
requrement that the c streams and c++ streams must work together)

i18n (localization)

