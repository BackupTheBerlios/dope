/*
 * Copyright (C) 2002,2003 Jens Thiele <karme@berlios.de>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*!
   \file dope/dope.h.in
   \brief 
   \author Jens Thiele
*/

#ifndef DOPE_DOPE_H
#define DOPE_DOPE_H

#include <iostream>
#include <exception> // for std::terminate

//! should we use inline
#define DOPE_INLINE inline

//! should we use RTTI for typenames - PROBLEM: the names are platform dependant
// #define DOPE_USE_RTTI 1

//! should a output stream use const references ? - see also TODO
#define DOPE_CONSTOUT 
// #define DOPE_CONSTOUT const

//! special compiler directive to markup functions which always return the same value
#define DOPE_FCONST
/*
  #define DOPE_FCONST __attribute__ ((const))
*/

//! switch of all runtime asserts and other debugging aids
/*
  #define NDEBUG
*/

//! define if you want to use boost:shared_ptr as DOPE_SMARTPTR (see also smartptr.h)
#define DOPE_USE_BOOST_SHARED_PTR

typedef const char * MemberName;

//! how to remove const (static_cast will at least produce warnings - if not an error)
/*
#define DOPE_REMOVE_CONST_CAST static_cast
*/
#define DOPE_REMOVE_CONST_CAST const_cast

extern int dope_micro_version;
extern int dope_minor_version;
extern int dope_major_version;


#ifdef __GNUC__
#define DOPE_FUNCTIONNAME __PRETTY_FUNCTION__
#else
#define DOPE_FUNCTIONNAME __func__
#endif

//! print stack / backtrace if possible
/*!
  Currently only works with gnu libc backtrace function in header execinfo.h
  if the the header is not available this funtion simply does nothing

  \note certain compiler optimizations may interfere with
  obtaining a valid backtrace.  Function inlining causes the inlined
  function to not have a stack frame; tail call optimization
  replaces one stack frame with another; frame pointer elimination
  will stop `backtrace' from interpreting the stack contents
  correctly.

  \note Currently, the function name and offset only be obtained on
  systems that use the ELF binary format for programs and libraries.
  On other systems, only the hexadecimal return address will be
  present.  Also, you may need to pass additional flags to the
  linker to make the function names available to the program.  (For
  example, on systems using GNU ld, you must pass (`-rdynamic'.)
*/
void 
dope_backtrace();

/*
  \def DOPE_HERE

  \brief std::cout << DOPE_HERE << std::endl; will print the current file, line number and function name
*/
#define DOPE_HERE __FILE__ << ":" << __LINE__ << ":" << DOPE_FUNCTIONNAME

/*
  \def DOPE_ERRORSTR

  \brief std::cout << DOPE_ERRORSTR << std::endl; will print the current errno value and its string
*/
#define DOPE_ERRORSTR "errno="<<errno<<":"<<strerror(errno)


/*!
  \def DOPE_MSG(dopeLevelP, dopeMsgP)
  \brief will print a message - for debugging
*/
#define DOPE_MSG(dopeLevelP, dopeMsgP) do{std::cerr << dopeLevelP << DOPE_HERE << ": " << dopeMsgP << "(" << DOPE_ERRORSTR << ")\n";}while(0)

inline int fatal(const char *file,int line,const char *func, const char *msg) 
{
  std::cerr << "FATAL: " << file << ":" << line << ":" << func << ": " << msg << "(" << DOPE_ERRORSTR <<")\n";
  dope_backtrace();
  std::terminate();
  return 0;
}

/*
  \def DOPE_STR(s)
  \brief DOPE_STR converts the macro argument to a string constant
*/
#define DOPE_STR(s) #s

/*
  \def DOPE_CHECK(expr)
  \brief DOPE_CHECK is like assert but takes also effect when NDEBUG is defined

  it seems there is no assert which is not disabled by a \#define NDEBUG 

*/
#define DOPE_CHECK(expr)							      \
  (static_cast<void> ((expr) ? 0 :							      \
	   (fatal(__FILE__, __LINE__, DOPE_FUNCTIONNAME, "assertion failed: " DOPE_STR(expr)))))

/*
  \def DOPE_ASSERT(expr)
  \brief DOPE_ASSERT is like assert but tries to print a stacktrace
*/
#ifdef NDEBUG
#define DOPE_ASSERT(expr) (static_cast<void>(0))
#else
#define DOPE_ASSERT(expr) DOPE_CHECK(expr)
#endif

/*!
  \def DOPE_FATAL(msg)
  \brief fatal error - exit with a short message
*/
#define DOPE_FATAL(msg) do{DOPE_MSG("FATAL: ",msg);dope_backtrace();std::terminate();}while(0)

/*! 
  \def WARN(msg)
  \brief print a warning message
*/
#define DOPE_WARN(msg) DOPE_MSG("WARNING: ",msg)

//! DOPE_BYTE_ORDER is equal to DOPE_LITTLE_ENDIAN on little endian architectures
/*!
  \note the DOPE_BYTE_ORDER macro is defined in <dope/arch.h> which is created from
  arch.h.in by autoconf and gets installed in /usr/lib/dope-?.?.?/dope/arch.h
*/
#define DOPE_LITTLE_ENDIAN 1234

//! DOPE_BYTE_ORDER is equal to DOPE_BIG_ENDIAN on big endian architectures
/*!
  \note the DOPE_BYTE_ORDER macro is defined in <dope/arch.h> which is created from
  arch.h.in by autoconf and gets installed in /usr/lib/dope-?.?.?/dope/arch.h
*/
#define DOPE_BIG_ENDIAN 4321

#endif // DOPE_DOPE_H


