/*
 * Copyright (C) 2002 Jens Thiele <jens.thiele@student.uni-tuebingen.de>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*!
   \file dope/dope.h.in
   \brief 
   \author Jens Thiele
*/

#ifndef DOPE_DOPE_H
#define DOPE_DOPE_H

#include <iostream>
#include <exception> // for std::terminate

//! should we use inline
#define DOPE_INLINE inline

//! should we use RTTI for typenames - PROBLEM: the names are platform dependant
// #define DOPE_USE_RTTI 1

//! should a output stream use const references ? - see also TODO
#define DOPE_CONSTOUT 
// #define DOPE_CONSTOUT const

//! special compiler directive to markup functions which always return the same value
#define DOPE_FCONST
/*
  #define DOPE_FCONST __attribute__ ((const))
*/

//! switch of all runtime asserts and other debugging aids
/*
  #define NDEBUG
*/

//! smart pointer type to use - reference implementation is boost::shared_ptr
/*!
  this is a define because it is a template type
  => you can't use a typedef - or is there somethin like this:
  template <typename X>
  typedef foo<X> bar<X>;
  dope should use a namespace and then import shared_ptr into its namespace
*/
#define DOPE_SMARTPTR boost::shared_ptr


typedef const char * MemberName;

//! how to remove const (static_cast will at least produce warnings - if not an error)
/*
#define DOPE_REMOVE_CONST_CAST static_cast
*/
#define DOPE_REMOVE_CONST_CAST const_cast

extern int dope_micro_version;
extern int dope_minor_version;
extern int dope_major_version;


#ifdef __GNUC__
#define DOPE_FUNCTIONNAME __PRETTY_FUNCTION__
#else
#define DOPE_FUNCTIONNAME __func__
#endif

/*
  \def DOPE_HERE

  \brief std::cout << DOPE_HERE << std::endl; will print the current file, line number and function name
*/
#define DOPE_HERE __FILE__ << ":" << __LINE__ << ":" << DOPE_FUNCTIONNAME

/*
  \def DOPE_ERRORSTR

  \brief std::cout << DOPE_ERRORSTR << std::endl; will print the current errno value and its string
*/
#define DOPE_ERRORSTR "errno="<<errno<<":"<<strerror(errno)

/*
  \def DOPE_CHECK(expr)
  \brief DOPE_CHECK is like assert but takes also effect when NDEBUG is defined

  it seems there is no assert which is not disabled by a \#define NDEBUG 

*/
#ifndef NDEBUG
#include <cassert>
#define DOPE_CHECK(expr) assert(expr);
#else
inline int fatal(const char *file,int line,const char *func, const char *msg) 
{
  std::cerr << "FATAL: " << file << ":" << line << ":" << func << ": " << msg << "(" << DOPE_ERRORSTR <<")\n";
  std::terminate();
  return 0;
}
# define DOPE_CHECK(expr)							      \
  ((void) ((expr) ? 0 :							      \
	   fatal(__FILE__, __LINE__, DOPE_FUNCTIONNAME, "assertion failed: "__STRING(expr))))
#endif // NDEBUG


/*!
  \def DOPE_MSG(dopeLevelP, dopeMsgP)
  \brief will print a message - for debugging
*/
#define DOPE_MSG(dopeLevelP, dopeMsgP) do{std::cerr << dopeLevelP << DOPE_HERE << ": " << dopeMsgP << "(" << DOPE_ERRORSTR << ")\n";}while(0)

/*!
  \def DOPE_FATAL(msg)
  \brief fatal error - exit with a short message
*/
#define DOPE_FATAL(msg) do{DOPE_MSG("FATAL: ",msg);std::terminate();}while(0)

/*! 
  \def WARN(msg)
  \brief print a warning message
*/
#define DOPE_WARN(msg) DOPE_MSG("WARNING: ",msg)

#endif // DOPE_DOPE_H

